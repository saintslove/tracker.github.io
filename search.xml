<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git第二弹]]></title>
    <url>%2F2018%2F05%2F10%2FGit%E7%AC%AC%E4%BA%8C%E5%BC%B9%2F</url>
    <content type="text"><![CDATA[1. 记录每次更新到仓库查看已暂存与未暂存的修改&ensp;命令git diff可以解决两个问题： &ensp;查看已经更新但未暂存的文件&ensp;&ensp;&ensp;使用命令git diff &ensp;查看已经暂存但未提交额文件&ensp;&ensp;&ensp;使用命令git diff --staged &ensp;若修改README文件并暂存，修改CONTRIBUTING.md文件不暂存，此时运行命令git status，显示如下： 123456789101112$ echo "My Project" &gt;&gt; README$ git add README$ echo "# test line" &gt;&gt; CONTRIBUTING.md$ git statusOn branch masterChanges to be committed:(use "git reset HEAD &lt;file&gt;..." to unstage)modified: READMEChanges not staged for commit:(use "git add &lt;file&gt;..." to update what will be committed)(use "git checkout -- &lt;file&gt;..." to discard changes in working directory)modified: CONTRIBUTING.md &ensp;命令git status未显示尚未暂存文件CONTRIBUTING.md更新的具体内容，此时通过命令git diff可查看详细情况，该命令默认情况仅显示未暂存文件的更新部分，所以当暂存了更新文件后，使用该命令未显示任何结果： 123456789$ git diffdiff --git a/CONTRIBUTING.md b/CONTRIBUTING.mdindex 643e24f..87f08c8 100644--- a/CONTRIBUTING.md+++ b/CONTRIBUTING.md@@ -119,3 +119,4 @@ at the## Starter ProjectsSee our [projects listhref="https://github.com/libgit2/libgit2/blob/development/PROJECTS.md").+# test line &ensp;若查看已暂存文件README的更新部分,通过加参数命令git diff --staged,显示如下： 12345678$ git diff --stageddiff --git a/README b/READMEnew file mode 100644index 0000000..03902a1--- /dev/null+++ b/README@@ -0,0 +1 @@+My Project &ensp;此时将CONTRIBUTING.md文件暂存，运行命令git diff，显示如下，; 1234567891011121314$ git diff --cacheddiff --git a/CONTRIBUTING.md b/CONTRIBUTING.mdindex 8ebb991..643e24f 100644--- a/CONTRIBUTING.md+++ b/CONTRIBUTING.md@@ -65,7 +65,8 @@ branch directly, things can get messy.Please include a nice description of your changes when you submit your PR;if we have to read the whole diff to figure out why you're contributingin the first place, you're less likely to get feedback and have your change-merged in.+merged in. Also, split your changes into comprehensive chunks if your patch is+longer than a dozen lines.If you are starting to work on a particular area, feel free to submit a PRthat highlights your work in progress (and note in the PR title that it's &ensp;未显示任何结果，因为README和CONTRIBUTING.md文件均已暂存，而git diff默认显示未暂存文件的更新部分。 提交更新&ensp;切记，每次提交前务必运行命令git status查看文件状态，确保文件均已暂存，随后可通过命令git commit -m&quot;更新说明&quot;提交暂存文件，比如： 1234$ git commit -m "Story 182: Fix benchmarks for speed"[master 463dc4f] Story 182: Fix benchmarks for speed2 files changed, 2 insertions(+)create mode 100644 README &ensp;可以看到，本次在master分支执行提交操作，完整 SHA-1 校验和为463dc4f，以及修改及增删的记录，谨记，提交操作仅记录暂存区的快照，未暂存的仍保持已修改状态，每一次提交操作都是对项目的一次快照，便于后续的回溯及比较。 跳过使用暂存区域&ensp;Git通过提供命令git commit -a跳过暂存区，在提交时，自动将所有被跟踪的文件暂存并一并提交，省略了命令git add操作： 12345678910$ git statusOn branch masterChanges not staged for commit:(use "git add &lt;file&gt;..." to update what will be committed)(use "git checkout -- &lt;file&gt;..." to discard changes in working directory)modified: CONTRIBUTING.mdno changes added to commit (use "git add" and/or "git commit -a")$ git commit -a -m 'added new benchmarks'[master 83e38c7] added new benchmarks1 file changed, 5 insertions(+), 0 deletions(-) 移除文件&ensp;由于被跟踪文件在暂存区均存在记录，若想移除某个文件，需将其从暂存区移除，通过命令git rm可以完成，同时删除本地文件，避免其出现在未跟踪文件清单中。 1234567$ git rm PROJECTS.mdrm 'PROJECTS.md'$ git statusOn branch masterChanges to be committed:(use "git reset HEAD &lt;file&gt;..." to unstage)deleted: PROJECTS.md &ensp;如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项-f，这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被Git恢复。当想在磁盘保留文件，但不想该文件被Git跟踪，除了在项目仓库增加.gitignore文件外，还可以通过命令git rm --cached log/\*.log，用于移除log/目录下扩展名为.log的所有文件。 移动文件&ensp;Git通过命令git mv实现文件重命名，比如： 123456$ git mv README.md README$ git statusOn branch masterChanges to be committed:(use "git reset HEAD &lt;file&gt;..." to unstage)renamed: README.md -&gt; README &ensp;该指令相当于执行以下三条指令： 123mv README.md READMEgit rm README.mdgit add README]]></content>
      <categories>
        <category>Git教程</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>集中式版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git第一弹]]></title>
    <url>%2F2018%2F05%2F09%2FGit%E7%AC%AC%E4%B8%80%E5%BC%B9%2F</url>
    <content type="text"><![CDATA[1. 获取Git仓库在现有目录中创建仓库 &ensp;若是管理现有项目，需在项目所在目录通过命令git init进行初始化操作，该命令在项目所在目录生成隐含文件夹.git，包含初始化仓库必要文件，但项目文件并未被跟踪，因此还需跟踪这些文件并提交至仓库。12$ git add .$ git commit -m'修改描述' 克隆现有仓库 &ensp;若想将一已存在仓库克隆值本地，需使用git clone [url]命令，该命令会将远程仓库每一个文件克隆至本地，对于Git可链接库libgit2，可通过日下如下命令实现远程克隆：1$ git clone https://github.com/libgit2/libgit2 &ensp;此时会在当前目录下创建名为libgit2的目录，并在该目录下初始化一个隐含的.git文件，远程仓库拉取的数据均存入.git文件，并从中读取最新版本的文件拷贝。&ensp;若想将libgit2克隆至自定义的仓库mylibgit时，可使用如下命令：1$ git clone https://github.com/libgit2/libgit2 mylibgit &ensp;本次使用的https://协议，Git同时支持多种传输协议，包括git://协议，SSH协议，比如user@server:path/to/repo.git，在服务器上搭建 Git将会介绍所有这些协议在服务器端如何配置使用，以及各种方式之间的利弊。 2. 记录每次更新到仓库&ensp;工作目录下的每一个文件均呈现两种状态，已跟踪或未跟踪。已跟踪文件指被纳入版本控制系统的文件，在上一次快照中存在记录，在工作一段时间后，该文件可能被修改、未修改或存放于暂存区；剩余文件均处于未跟踪状态，均不存在于暂存区及最近一次的快照记录。初次克隆仓库中的文件均处于被跟踪状态。Git会对被修改的文件添加修改标记，Git文件的生命周期如下所示： 检查当前文件状态 &ensp;使用git status命令，对于初始克隆仓库，该命令显示结果如下：123$ git statusOn branch masternothing to commit, working directory clean &ensp;表明工作区很干净，即已跟踪文件未被更改，此外还表明该目录未出现未被跟踪的文件，且当前处于master分支。此时新建README文件，使用git status命令显示如下:1234567$ echo 'My Project' &gt; README$ git statusOn branch masterUntracked files:(use "git add &lt;file&gt;..." to include in what will be committed)READMEnothing added to commit but untracked files present (use "git add" to track) &ensp;状态显示README文件出现在Untracked files区域，表明该文件在之前的快照中不存在，Git不会自动将文件纳入跟踪范围，除非明确告知Git需要跟踪该文件。 跟踪新文件&ensp;git add用于跟踪新文件或已跟踪文件存入暂存区，还能用于合并时把有冲突的文件标记为已解决状态等，将这个命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适，用法如下： &ensp;git add [file]&ensp;&ensp;&ensp;跟踪文件file &ensp;git add [Dir]&ensp;&ensp;&ensp;递归跟踪路径Dir下的所有文件 &ensp;跟踪README文件需使用git add命令，运行如下：1$ git add README &ensp;随后运行git status命令，观察README文件新状态如下：12345$ git statusOn branch masterChanges to be committed:(use "git reset HEAD &lt;file&gt;..." to unstage)new file: README &ensp;Changes to be committed:表明文件README已处于暂存状态，位于暂存区，一旦提交，该文件将被Git快照记录。 暂存已修改文件&ensp;修改已跟踪文件CONTRIBUTING.md，随机运行命令git status，显示如下：123456789$ git statusOn branch masterChanges to be committed:(use "git reset HEAD &lt;file&gt;..." to unstage)new file: READMEChanges not staged for commit:(use "git add &lt;file&gt;..." to update what will be committed)(use "git checkout -- &lt;file&gt;..." to discard changes in working directory)modified: CONTRIBUTING.md &ensp;Changes not staged for commit:表明CONTRIBUTING.md被更改但并未存入暂存区，运行命令git add CONTRIBUTING.md，显示如下：1234567$ git add CONTRIBUTING.md$ git statusOn branch masterChanges to be committed:(use "git reset HEAD &lt;file&gt;..." to unstage)new file: READMEmodified: CONTRIBUTING.md &ensp;Changes to be committed:，表明文件CONTRIBUTING.md已被存入暂存区，此时对CONTRIBUTING.md再次修改并存盘，随即运行命令git status，显示如下：1234567891011$ vim CONTRIBUTING.md$ git statusOn branch masterChanges to be committed:(use "git reset HEAD &lt;file&gt;..." to unstage)new file: READMEmodified: CONTRIBUTING.mdChanges not staged for commit:(use "git add &lt;file&gt;..." to update what will be committed)(use "git checkout -- &lt;file&gt;..." to discard changes in working directory)modified: CONTRIBUTING.md &ensp;可以看到CONTRIBUTING.md同时存在于Changes to be committed:与Changes not staged for commit:，因为Git仅暂存了运行git add命令的版本，因此在修改文件后续运行命令git add重新跟踪文件。1234567$ git add CONTRIBUTING.md$ git statusOn branch masterChanges to be committed:(use "git reset HEAD &lt;file&gt;..." to unstage)new file: READMEmodified: CONTRIBUTING.md &ensp;可通过运行命令git status -s获得文件状态的简明报告，输出如下：123456$ git status -sM READMEMM RakefileA lib/git.rbM lib/simplegit.rb?? LICENSE.txt &ensp;??&ensp;&ensp;LICENSE.txt为新添加的未被跟踪文件 &ensp;M&ensp;&ensp;README在工作区被修改但并未存入暂存区 &ensp;A&ensp;&ensp;lib/git.rb被修改后并添加至暂存区 &ensp;MM&ensp;&ensp;左侧M表示Rakefile被修改并放入暂存区,右侧M表示Rakefile被修改但未存入暂存区,因此Rakefile在工作区被修改并提交到暂存区后又在工作区中被修改了,所以在暂存区和工作区都有该文件被修改了的记录 忽略文件&ensp;对于不想出现在未跟踪文件列表或无需纳入Git管理的文件,可以通过创建文件.gitignore,列出要忽略的文件模式，模式采用shell格式,文件.gitignore 的格式规范如下,更多内容可访问.gitignore文件列表： 所有空行或者以＃开头的行都会被 Git 忽略 可以使用标准的glob模式匹配 匹配模式可以以/开头防止递归 匹配模式可以以/结尾指定目录 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反 &ensp;所谓的 glob 模式是指 shell所使用的简化了的正则表达式。星号(*)匹配零个或多个任意字符;[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个a,要么匹配一个b,要么匹配一个 c；问号(?)只匹配一个任意字符；[0-9] 匹配所有0到9的数字;使用两个星号(**) 表示匹配任意中间目录,比如a/**/z可以匹配a/z,a/b/z 或 a/b/c/z等。实例如下：123456789101112# no .a files*.a# but do track lib.a, even though you're ignoring .a files above!lib.a# only ignore the TODO file in the current directory, not subdir/TODO/TODO# ignore all files in the build/ directorybuild/# ignore doc/notes.txt, but not doc/server/arch.txtdoc/*.txt# ignore all .pdf files in the doc/ directorydoc/**/*.pdf]]></content>
      <categories>
        <category>Git教程</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>集中式版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F04%2F26%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post.Check documentation for more info.If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing 支持Markdown Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites Download Now 1$ hexo deploy More info: Deployment var options = {"narrow":false,"autoplay":false,"showlrc":3,"mutex":true,"music":[{"title":"成都","author":"赵雷","url":"http://p7vw4w30r.bkt.clouddn.com/%E8%B5%B5%E9%9B%B7%20-%20%E6%88%90%E9%83%BD.mp3","pic":"http://p7vw4w30r.bkt.clouddn.com/%E6%88%90%E9%83%BD.jpg","lrc":"http://p7vw4w30r.bkt.clouddn.com/%E6%88%90%E9%83%BD_%E6%AD%8C%E8%AF%8D.lrc"}]}; options.element = document.getElementById("aplayer-VYNNnIpB"); var ap = new APlayer(options); window.aplayers || (window.aplayers = []); window.aplayers.push(ap);]]></content>
  </entry>
</search>
